{
  "compilerOptions": {
    // ts -> js (es5/6/7/8 ....)
    "target": "ESNext",
    "useDefineForClassFields": true,
    // 代码需要使用的模块化方案 (commonjs  / es module)
    "module": "ESNext",
    // 按照 node 方式解析模块
    "moduleResolution": "node",
    // 严格模式
    "strict": true,
    // 对 jsx 进行怎么样的处理  preserve 保留
    "jsx": "preserve",
    // 辅助的导入功能
    "importHelpers": true,
    // 要不要生成映射文件 ts -> js
    "sourceMap": true,
    "suppressImplicitAnyIndexErrors": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    //export default  //  module.export = {}  能不能混合使用
    // es module 和 commonjs 混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 可以指定在项目中使用那些库里面的类型
    "lib": ["ESNext", "DOM", "DOM.Iterable", "ScriptHost"],
    // 跳过对我们一些库的类型检测
    "skipLibCheck": true,
    // 文件路径解析时，基本 url
    "baseUrl": "./",
    // 指定具体要解析使用的类型 可以不传，默认使用 target的设置
    // "types": []
    // 路径解析
    "paths": {
      "@/*":["src/*",],
      "components/*":["src/components/*"]
    },

  },
  // 那些代码是需要经过编译解析的
  "include": ["vite.config.ts","src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue","src/mock/**.ts", "src/apis/request.js", "src/apis/user.ts"],
  // 排除
  "exclude": ["node_modules"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
